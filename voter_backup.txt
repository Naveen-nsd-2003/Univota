import React, { useState, useEffect, createContext } from "react";
import Web3Modal from "web3modal";
import { ethers } from "ethers";

import { create as ipfsHttpClient } from "ipfs-http-client";

import axios from "axios";

import { useRouter } from "next/router";

// INTERNAL IMPORT
import { VotingAddress, VotingAddressABI } from "./constants";


const fetchContract = (signerOrProvider) =>
  new ethers.Contract(VotingAddress, VotingAddressABI, signerOrProvider);

export const VotingContext = createContext();

export const VotingProvider = ({ children }) => {
  const votingTitle = "My first smart contract app";

  const router =useRouter();

  const [currentAccount,setCurrentAccount]=useState('');
  const [candidateLength, setcandidateLength] = useState('');

  const pushCandidate=[];
  const candidateIndex=[];
  const [candidateArray, setcandidateArray] = useState(pushCandidate);


  //----------------end of candidate data

  const [error, seterror] = useState('');
  const highestVote=[];

  //----VOTER SECTION
 const pushVoter=[];
 const [voterArray, setvoterArray] = useState(pushVoter);
 const [voterLength, setvoterLength] = useState('');
 const [voterAdddress, setvoterAdddress] = useState([]);



 // ------------CONNECTING WALLET METAMASK

 const checkIfWalletIsConnected=async () => {
    if (!window.ethereum) return seterror("please install Metamask");
    const account =await window.ethereum.request({method: "eth_accounts"});

    if(account.length)
    {
        setCurrentAccount(account[0]);
        getAllVoterData();
        getNewCandidate();

    }else{
        seterror("please install MetaMask & Connect , Reload ");
    }
 };

 //----connect wallet

 const connectWallet=async () => {

     if (!window.ethereum) return seterror("please install Metamask");
    const account =await window.ethereum.request({method: "eth_requestAccounts"});

    setCurrentAccount(account[0]);
     getAllVoterData();
    getNewCandidate();
 };


 //----upload to ipfs voter image

 const uploadToIPFS=async (file) =>  {

  if(file){

    try {
       const formData =new FormData();
       formData.append("file",file);

       const response =await axios({
        method:"post",
        url: "https://api.pinata.cloud/pinning/pinFileToIPFS",
        data:formData,
        headers:{
          pinata_api_key:`3b84c12c994829d24703`,
          pinata_secret_api_key:`8648bc1e13e2d99e423fabda9aa84ce76e61cb94bb64447477b31b59be582a3d`,
          "Content-Type":"multipart/form-data",
        },
       });
       const ImgHash=`https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`;
       return ImgHash;
    } catch (error) {
        seterror("Unable to upload image to pinata");
        
    }
  }  
 };

 
 //----upload to ipfs candidate image

 const uploadToIPFSCandidate=async (file) =>  {
if(file){

    try {
       const formData =new FormData();
       formData.append("file",file);
       
       const response =await axios({
        method:"post",
        url: "https://api.pinata.cloud/pinning/pinFileToIPFS",
        data:formData,
        headers:{
          pinata_api_key:`3b84c12c994829d24703`,
          pinata_secret_api_key:`8648bc1e13e2d99e423fabda9aa84ce76e61cb94bb64447477b31b59be582a3d`,
          "Content-Type":"multipart/form-data",
        },
       });
       const ImgHash=`https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`;
       return ImgHash;
    } catch (error) {
        seterror("Unable to upload image to pinata");
        
    }
  }  
  
};

 // ---------create voter
 const createVoter=async (formInput,fileUrl,router) => {
  try {
    const{name,address,position}=formInput;
    if(!name || !address || !position )
      return seterror("Fill the all details");

    //CONNECTING SMART CONTRACT

    const web3modal=new Web3Modal() ;
    
    const connection=await web3modal.connect();
    const provider=new ethers.providers.Web3Provider(connection);
    const signer=provider.getSigner();
    const contract=fetchContract(signer);
    console.log(contract);


    const data=JSON.stringify({name,address,position,image:fileUrl});

    const response =await axios({
      method:"post",
      url: "https://api.pinata.cloud/pinning/pinJSONToIPFS",
      data:data,
      headers:{
        pinata_api_key:`3b84c12c994829d24703`,
          pinata_secret_api_key:`8648bc1e13e2d99e423fabda9aa84ce76e61cb94bb64447477b31b59be582a3d`,
          "Content-Type":"application/json",
      },

    });
    const url=`https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`;

    const voter =await contract.voterRight(address,name,url,fileUrl);
    voter.wait();
    
    router.push("/voterList")
  } catch (error) {
    seterror("something wrong creating voter")
    
  }
  
 };
 //--------------GET VOTER DATA
 const getAllVoterData=async () => {

  try{
    const web3modal=new Web3Modal() ;
    const connection=await web3modal.connect();
    const provider=new ethers.providers.Web3Provider(connection);
    const signer=provider.getSigner();
    const contract=fetchContract(signer);
    
    //------VOTER LIST
    const voterListData=await contract.getVoterList();
    setvoterAdddress(voterListData);
    console.log(voterAdddress);
  
    voterListData.map(async (el) => {
      const singleVoterData=await contract.getVoterData(el);
      pushVoter.push(singleVoterData)
      
    });
  
    //VOTER LENGTH
    const voterList=await contract.getVoterLength();
    setvoterLength(voterList.toNumber());   //may be mistake 
  
   }
   catch (error) {
    seterror("Something went wrong fetching data")
    
  }
  };
  
 useEffect(() => {
  getAllVoterData();
 }, []);

//-----give vote
 
const giveVote=async (id) => {
  try {

    
  } catch (error) {
    console.log
    
  }
  
};
//------------------candidate section--------------------------

const setCandidate=async (candidateForm,fileUrl,router) => {
  try {
    const{name,address,age}=candidateForm;
    //console.log(name,address,position,fileUrl);
    if(!name || !address || !age )
      return seterror("Fill the all details");

    console.log(name,address,age,fileUrl);

    //CONNECTING SMART CONTRACT

    const web3modal=new Web3Modal() ;
    const connection=await web3modal.connect();
    const provider=new ethers.providers.Web3Provider(connection);
    const signer=provider.getSigner();
    const contract=fetchContract(signer);

    console.log(contract);


    const data=JSON.stringify({name,address,image:fileUrl,age,});

    const response =await axios({
      method:"post",
      url: "https://api.pinata.cloud/pinning/pinJSONToIPFS",
      data:data,
      headers:{
        pinata_api_key:`3b84c12c994829d24703`,
          pinata_secret_api_key:`8648bc1e13e2d99e423fabda9aa84ce76e61cb94bb64447477b31b59be582a3d`,
          "Content-Type":"application/json",
      },

    });
    const url=`https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`;

    
    const candidate =await contract.setCandidate(
      address,
      age,
      name,
      fileUrl,
      url);
    candidate.wait();

    console.log(candidate)
    
   router.push("/")
  } catch (error) {
    seterror("something wrong creating voter")
    
  }
  
 };
 //-------get candidate data
 const getNewCandidate =async () => {
  try {
    const web3modal=new Web3Modal() ;
    const connection=await web3modal.connect();
    const provider=new ethers.providers.Web3Provider(connection);
    const signer=provider.getSigner();
    const contract=fetchContract(signer);

    //-------------all candidate
    const allCandidate =await contract.getCandidate();

    allCandidate.map(async (el) => {
      const singleCandidateData =await contract.getCandidatedata(el);
      console.log("candidate data",singleCandidateData);

      pushCandidate.push(singleCandidateData);
      candidateIndex.push(singleCandidateData[2].toNumber());
      //console.log(singleCandidateData)
    });
    //-------candidate length
    const allCandidateLength =await contract.getCandidateLength();
    setcandidateLength(allCandidateLength.toNumber());
    
  } catch (error) {
    console.log(error);
   }
  
 };

 useEffect(() => {
  checkIfWalletIsConnected();   // This checks wallet automatically on page load
  getNewCandidate();            // This loads candidate data
}, []);

 

  return (
    <VotingContext.Provider value={{ votingTitle,
    checkIfWalletIsConnected,
    connectWallet,
    uploadToIPFS,
    createVoter,
    getAllVoterData,
    giveVote,
    setCandidate,
    getNewCandidate,
    error,
    voterArray,
    voterLength,
    voterAdddress,
    currentAccount,
    candidateLength,
    candidateArray,
    uploadToIPFSCandidate,
    }}>
      {children}
    </VotingContext.Provider>
  );
};

export default VotingProvider;















allowed voters.js file 

import React, { useCallback, useContext, useEffect, useState } from "react";
import { useDropzone } from "react-dropzone";
import { useRouter } from "next/router";
import Image from "next/image";

import { VotingContext } from "../context/Voter";
import Style from "../styles/allowedVoter.module.css";
import Button from "../components/Button/Button";
import uploadImg from "../assets/upload.png";


const AllowedVoter = () => {
  const [fileUrl, setFileUrl] = useState(null);
  const [formInput, setFormInput] = useState({ name: "", address: "", position: "" });
  const router = useRouter();
  const { uploadToIPFS, createVoter, voterArray, getAllVoterData } = useContext(VotingContext);

  const onDrop = useCallback(async (acceptedFile) => {
    const url = await uploadToIPFS(acceptedFile[0]);
    setFileUrl(url);
  }, [uploadToIPFS]);

  const { getRootProps, getInputProps } = useDropzone({
    onDrop,
    accept: "image/*",
    maxSize: 5000000,
  });

  useEffect(() => {
    getAllVoterData();
  }, []);

  return (
    <div className={Style.candidateContainer}>
      <h2 className={Style.header}>Voter Registration</h2>

      {/* Form Section */}
      <div className={Style.formSection}>
        <div className={Style.inputGroup}>
          <label>Voter Name</label>
          <input type="text" placeholder="Enter Name" onChange={(e) => setFormInput({ ...formInput, name: e.target.value })} />
        </div>

        <div className={Style.inputGroup}>
          <label>Address</label>
          <input type="text" placeholder="Enter Wallet Address" onChange={(e) => setFormInput({ ...formInput, address: e.target.value })} />
        </div>

        <div className={Style.inputGroup}>
          <label>Position</label>
          <input type="text" placeholder="Enter Position" onChange={(e) => setFormInput({ ...formInput, position: e.target.value })} />
        </div>

        

        <div {...getRootProps()} className={Style.imageUploadBox}>
          <input {...getInputProps()} />
          <div>
            <Image src={uploadImg} alt="upload" width={80} height={80} />
            <p>Click or drop candidate image</p>
          </div>
        </div>

        

        <div className={Style.buttonSection}>
          <Button btnName="Authorize Voter" handleClick={() => createVoter(formInput, fileUrl, router)} />
        </div>
      </div>

      {/* Voter Cards */}
      <div className={Style.cardGrid}>
        {voterArray.map((el, i) => (
          <div key={i} className={Style.cardItem}>
            <img src={el[4]} alt="Voter" />
            <h4>{el[1]}</h4>
            <p><strong>Address:</strong> {el[3].slice(0, 15)}...</p>
            <p><strong>Status:</strong> {el[6] ? "Voted" : "Not Voted"}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default AllowedVoter;


candidate-Registration.jsx

/*import React,{useState,useEffect,useCallback,useContext} from "react";
import { useRouter } from "next/router";
import Dropzone, { useDropzone } from "react-dropzone";
import Image from "next/image";

//---internal imports
import { VotingContext } from "../context/Voter";
import  Style  from "../styles/allowedVoter.module.css";
import  images  from "../assets";
import  Button from "../components/Button/Button";
import  Input  from "../components/Input/Input";

const CandidateRegistastion =()=>{
  const [fileUrl, setFileUrl] = useState(null);
  const [candidateForm, setCandidateForm] = useState({
    name:"",
    address:"",
    age:"",
  });

  const router=useRouter();
  const {setCandidate,uploadToIPFSCandidate,candidateArray,getNewCandidate}=useContext(VotingContext);

  //---------VOTERS IMAGE DROP

  const onDrop =useCallback (async (acceptedFil)=>{
    const url =await uploadToIPFSCandidate(acceptedFil[0]);
    setFileUrl(url);

  },[uploadToIPFSCandidate]);

  const {getRootProps,getInputProps}=useDropzone({
    onDrop,
    accept:"image/*",
    maxSize:5000000,

  });
  useEffect(() => {
    getNewCandidate();
   }, [])
  

 console.log(fileUrl);

  //----JSX PART


  
    return (
    <div className={Style.createVoter}>
      <div>
        {!fileUrl && (
          <div className={Style.voterInfo}>
            <img src={fileUrl} alt ="Voter Image" />
            <div className={Style.voterInfo_paragraph}>
              <p>
                Name: <span>&nbps;{candidateForm.name}</span>
              </p>
              <p>
              Add: <span>&nbps;{candidateForm.address.slice(0,10)}</span>
              </p>
              <p>
                Party Name: <span>&nbps;{candidateForm.age}</span>
              </p>
            </div>
          </div>
        )}


        {
          !fileUrl && (
            <div className={Style.sideInfo}>
              <div className={Style.sideInfo_box}>
                <h4> Create Candidate For Voting </h4>
                <p>
                🛡️ Create a seamless and secure blockchain-powered voting experience! 🔒 
                </p>
                <p className={Style.sideInfo_para} style={{ fontWeight: 'bold' }}>Contract Candidate</p>

                <div className={Style.card}> 
                 {candidateArray.map((el,i)=>(
                  <div key={i+1} className={Style.card_box}>

                    <div className={Style.images}>
                      <img src={el[3]} alt="profile photo"/>
                    </div>

                    <div className={Style.card_info}>
                      <p>{el[1]} #{el[2].toNumber()}</p>
                      <p>{el[0]}</p>
                      <p>Address:{el[6].slice(0,10)}..</p>

                    </div>
                  </div>
                ))} 
                </div>
              </div>
            </div>
          )}


      </div>
      <div className={Style.voter}>
        <div className={Style.voter__container}>
          <h1> Create New Candidate</h1>
          <div className={Style.voter__container__box}>
            <div className={Style.voter__container__box__div}>
              <div {...getRootProps()}>
                <input{...getInputProps()}/>
                <div className={Style.voter__container__box__div__info}>
                  <p>📤 Upload your file: JPG, PNG, GIF, WEBM (Max 10MB) 📸</p>

                  <div className={Style.voter__container__box__div__image}>
                    <Image src={images.upload} width={150} height={150} objectFit="contain" alt=" file upload"/>
                  </div>
                  <p>🖱️ Drop your file here,</p>
                  <p>or 📲 Browse your device’s media! 📸</p>

                </div>
              </div>
            </div>
          </div>
        </div>
        <div className={Style.input__cointainer}>
          <Input
           inputType="text"
           title="Name" 
           placeholder='Voter Name'
            handleClick={(e)=> setCandidateForm({...candidateForm,name:e.target.value})
            }
            />
            <Input
           inputType="text"
           title="Address" 
           placeholder='Voter Address'
            handleClick={(e)=> setCandidateForm({...candidateForm,address:e.target.value})
            }
            />
            <Input
           inputType="text"
           title="Age" 
           placeholder='Party Name'
            handleClick={(e)=> setCandidateForm({...candidateForm,age:e.target.value})
            }
            />
            <div className={Style.Button}>
              <Button btnName="Authorized Candidate" handleClick={()=>setCandidate(candidateForm,fileUrl,router)}/>
            </div>
        </div>
      </div>
      
      <div className={Style.createVoter}>
        <div className={Style.createVoter__info}>
          <Image src={images.upload} alt="user profile" width={100} height={100}/>
          <p><strong>Notice For User</strong></p>
          <p><strong>Organizer</strong> <span>0x939939..</span></p>
          <p><strong>⚠️ Only the organizer of the voting contract can create voters for the voting election ⚖️</strong></p>

        </div>
      </div>

    </div>
  );
  };

 
export default CandidateRegistastion;*/

import React, { useState, useCallback, useContext, useEffect } from "react";
import { useRouter } from "next/router";
import { useDropzone } from "react-dropzone";
import Image from "next/image";

// Internal imports
import { VotingContext } from "../context/Voter";
import Style from "../styles/candidateRegistration.module.css";
import uploadImg from "../assets/upload.png";

const CandidateRegistration = () => {
  const [fileUrl, setFileUrl] = useState(null);
  const [formInput, setFormInput] = useState({
    name: "",
    address: "",
    age: "",
  });

  const router = useRouter();
  const { setCandidate, uploadToIPFSCandidate, candidateArray, getNewCandidate } = useContext(VotingContext);

  const onDrop = useCallback(async (acceptedFile) => {
    const url = await uploadToIPFSCandidate(acceptedFile[0]);
    setFileUrl(url);
  }, [uploadToIPFSCandidate]);

  const { getRootProps, getInputProps } = useDropzone({
    onDrop,
    accept: "image/*",
    maxSize: 5000000,
  });

  useEffect(() => {
    getNewCandidate();
  }, []);

  return (
    <div className={Style.candidateContainer}>
      <h1 className={Style.header}>Candidate Registration</h1>

      <div className={Style.formSection}>
        <div className={Style.inputGroup}>
          <label>Name</label>
          <input
            type="text"
            placeholder="Enter candidate name"
            value={formInput.name}
            onChange={(e) => setFormInput({ ...formInput, name: e.target.value })}
          />
        </div>

        <div className={Style.inputGroup}>
          <label>Address</label>
          <input
            type="text"
            placeholder="Candidate blockchain address"
            value={formInput.address}
            onChange={(e) => setFormInput({ ...formInput, address: e.target.value })}
          />
        </div>

        <div className={Style.inputGroup}>
          <label>Party Name</label>
          <input
            type="text"
            placeholder="party Name"
            value={formInput.age}
            onChange={(e) => setFormInput({ ...formInput, age: e.target.value })}
          />
        </div>

        <div {...getRootProps()} className={Style.imageUploadBox}>
          <input {...getInputProps()} />
          <div>
            <Image src={uploadImg} alt="upload" width={80} height={80} />
            <p>Click or drop candidate image</p>
          </div>
        </div>

        {fileUrl && (
          <div className={Style.imagePreview}>
            <img src={fileUrl} alt="Candidate" />
            <p>{formInput.name}</p>
          </div>
        )}

        <div className={Style.buttonSection}>
          <button onClick={() => setCandidate(formInput, fileUrl, router)}>
            Authorize Candidate
          </button>
        </div>
      </div>

      {/* Candidate List */}
      <div className={Style.cardGrid}>
        {candidateArray.map((el, i) => (
          <div key={i} className={Style.cardItem}>
            <img src={el[3]} alt="candidate" />
            <h4>{el[1]} #{el[2].toNumber()}</h4>
            <p><strong>Party Name:</strong> {el[0]}</p>
            <p><strong>Address:</strong> {el[6].slice(0, 15)}...</p>

          </div>
        ))}
      </div>

      {/* Notice Box */}
      <div className={Style.noticeBox}>
        <strong>Note:</strong> Only the <b>Organizer</b> can register candidates for the election.
      </div>
    </div>
  );
};

export default CandidateRegistration;
